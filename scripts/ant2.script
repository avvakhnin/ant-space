go.property("acceleration", 5)
go.property("deceleration", 2)
go.property("max_speed", 10)
go.property("rotation_speed", 180)

-- unit vector pointing up
local FORWARD = vmath.vector3(0, 0, -1)

function init(self)
	-- set material color
	go.set("#model", "color", vmath.vector4(0.9, 0.4, 0.6, 0.1))
	
	-- make sure the script will receive user input
	msg.post(".", "acquire_input_focus")

	-- movement input
	self.input = vmath.vector3()

	-- the current speed (pixels/second)
	self.speed = 0
	self.food_ids = {}
end

function update(self, dt)
	-- accelerating?
	if self.input.y > 0 then
		-- increase speed
		self.speed = self.speed + self.acceleration * dt
		-- cap speed
		self.speed = math.min(self.speed, self.max_speed)
	else
		-- decrease speed when not accelerating
		self.speed = self.speed - self.deceleration * dt
		self.speed = math.max(self.speed, 0)
	end

	-- apply rotation based on self.input.x (left/right)
	local rot = go.get_rotation()
	-- amount to rotate (in radians)
	local rot_amount = math.rad(self.rotation_speed * self.input.x * dt)
	-- apply rotation as a quaternion created from a rotation of 'rot_amount' degrees around the z-axis
	rot = rot * vmath.quat_rotation_y(rot_amount)
	go.set_rotation(rot)

	-- move the game object
	local p = go.get_position()
	-- amount to move (pixels)
	local move_amount = FORWARD * self.speed * dt
	-- apply rotation to movement vector to move game object in the direction of rotation
	p = p + vmath.rotate(rot, move_amount)
	go.set_position(p)

	-- reset input
	self.input = vmath.vector3()
end

function on_input(self, action_id, action)
	-- update direction of movement based on currently pressed keys
	if action_id == hash("up") then
		self.input.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
	elseif action_id == hash("left") then
		self.input.x = 1
	elseif action_id == hash("right") then
		self.input.x = -1
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.group == hash("food") then
			catch_food(self, message.other_id)
		end
		if message.group == hash("place") then
			local food_data = pack_food(self)
			if #food_data >0 then
				local place_url = msg.url(nil, message.other_id , "food_court")
				msg.post(place_url, "add_food",{food = food_data})
			end
		end
	end
end

function catch_food(self, food_id)
	table.insert(self.food_ids, food_id)
	go.set_parent(food_id, go.get_id())

	local food_position = vmath.vector3(0, 1+#self.food_ids/10.0, #self.food_ids/10.0)
	go.set_position(food_position, food_id)

	local food_collision_url = msg.url(nil, food_id , "collisionobject")
	msg.post(food_collision_url, "disable")

end

function pack_food(self)
	local food_data = {}
	for i,food_id in ipairs(self.food_ids) do
		local food_url = msg.url(nil, food_id , "food")
		local food_color = go.get(food_url,"color")
		local food_category = go.get(food_url, "category")
		table.insert(food_data, {color = food_color, category = food_category })
		go.delete(food_id)
	end
	self.food_ids = {}
	return food_data
end
	